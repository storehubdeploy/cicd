# coding: utf-8
# Author  : mingdez

import os
import sys
import time
import hashlib
import paramiko
import requests
import shutil
import tarfile
import json

# output
def print_color(color,text):
    '''
    30:黑                don't like it
    31:红    for stderr
    32:绿                don't like it
    33:棕                don't like it
    34:蓝    for stdout
    35:紫红  for title
    36:青                just so so
    37:灰                can't see it
    '''
    print("\033[1;{0}m{1}\033[0m".format(color, text))

def black(msg):
    print_color(30, msg)

def green(msg):
    print_color(32, msg)

def die(text):
    print_color(31, text)
    sys.exit(1)

def match_env(file_1 = ".env.example", file_2 = ".env", extra = ["PORT"]):
    if not os.path.exists(file_2):
        die(">>> dotenv files not exists")

    class Properties(object):
        def __init__(self, file):
            self.properties = {}
            with open(file, 'r') as f:
                for line in f:
                    line = line.strip()
                    if line.find('=') > 0 and not line.startswith('#'):
                        strs = line.split('=')
                        self.properties[strs[0].strip()] = strs[1].strip()

        def get_keys(self):
            return self.properties

        def get_value(self, key, default_value = ''):
            if key in self.properties:
                return self.properties[key]
            return default_value

    arr1 = Properties(file_1).get_keys()
    arr2 = Properties(file_2).get_keys()
    set_extra = ()
    set_1 = ()
    set_2 = ()

    set_extra = set(extra)
    set_1 = set(arr1) - set_extra
    set_2 = set(arr2) - set_extra

    set_more1 = ()
    set_more2 = ()

    set_1_2 = set_1 & set_2
    set_more1 = set_1 - set_1_2

    if len(set_more1) > 0:
        die('>>>{} NOT FOUND in {}'.format(set_more1, file_2))

def get_config(app, env, cluster = "default", namespace = "application"):
    dev_meta = 'http://apollo-dev.shub.us'
    fat_meta = 'http://apollo-fat.shub.us'
    uat_meta = 'http://apollo-uat.shub.us'
    pro_meta = 'http://apollo-pro.shub.us'

    if env == 'test' or env == 'fat':
        url = fat_meta
    elif env == 'dev':
        url = dev_meta
    elif env == 'uat':
        url = uat_meta
    elif env == 'pro':
        url = pro_meta
    else:
        die(">>>Can't connect to {url}".format(url = url))

    r = requests.get("{0}/configfiles/json/{1}/{2}/{3}".format(url, app, cluster, namespace))
    if r.status_code == 200:
        with open('.env', 'a') as f:
            for k, v in r.json().items():
                f.write("{0}={1}\n".format(k, v))
    else:
        die(">>>Can't connect to {url}".format(url = url))

def read_configs(env,cluster,app):
    from dotenv import load_dotenv
    dotenv_path = os.path.join(os.path.split(os.path.realpath(__file__))[0],'../.env')
    # print(dotenv_path)
    load_dotenv(dotenv_path)
    config_file = os.getenv("config_file")
    # print(config_file)
    black(">>> Getting configurations")
    cfg_key  = "nodejs#{env}#{cluster}#{app}".format(env=env,cluster=cluster,app=app)
    configs  = []
    for line in open(config_file):
        if cfg_key in line:
            info   = line.split('#')
            config = {}
            config['host'   ] = info[4].strip('\n')
            config['node'   ] = info[5].strip('\n')
            config['launch' ] = info[6].strip('\n')
            config['extra'  ] = info[7].strip('\n')
            configs.append(config)
    if configs == []:
        die(">>> Can't get the configurations!")
    else:
        black(json.dumps(configs,indent=4))
    return configs

def call(cmd, silent=False):
    from subprocess import Popen, PIPE, STDOUT
    import tempfile

    class CallResult(object):
        def __init__(self, out, err, returncode):
            self.out = out
            self.err = err
            self.code = returncode

    temp_file_stdout = tempfile.TemporaryFile()
    temp_file_stderr = tempfile.TemporaryFile()
    result = Popen(cmd, shell=True, stdin=PIPE, \
        stdout=temp_file_stdout.fileno(), stderr=temp_file_stderr.fileno(), close_fds=False)
    result.wait()

    temp_file_stdout.seek(0)
    out = temp_file_stdout.read().decode().strip()
    temp_file_stdout.close()
    temp_file_stderr.seek(0)
    err = temp_file_stderr.read().decode().strip()
    temp_file_stderr.close()

    if result.returncode == 0:
        if silent:
            pass
        else:
            print_color(32,out)
    else:
        die(err)

    return CallResult(out, err, result.returncode)

#delete
def rm(file):
    if os.path.isfile(file):
        os.remove(file)
    if os.path.isdir(file):
        shutil.rmtree(file)
    print_color(31, '==> delete %s' % file)

# copy
def copy_file(old, new):
    if os.path.exists(old):
        if os.path.isfile(old):
            shutil.copyfile(old, new)
        if os.path.isdir(old):
            shutil.copytree(old, new)
    else:
        print_color(31, "==> %s not exits!" % old)

# ssh 
class SSH(object):
    def __init__(self,host):
        self.host    = host
        self.user    = 'web'
        self.pk_path = '/home/web/.ssh/id_rsa'
        self.port    = 22
        self.connect()

    def connect(self):
        key = paramiko.RSAKey.from_private_key_file(self.pk_path)
        self.ssh = paramiko.SSHClient()
        self.ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        self.ssh.load_system_host_keys()
        try:
            self.ssh.connect( self.host, port = self.port, username = self.user, pkey = key )
        except:
            print_color(31, "==> Can't reach %s" % self.host)
            sys.exit(25)

    def close(self):
        self.ssh.close()

    def run(self,command,out=True,result=False):
        print_color(30, '==> ssh {0} "{1}"'.format(self.host,command))
        stdin, stdout, stderr = self.ssh.exec_command(command)
        rc = len(stderr.readlines())
        if out:
            if result:
                if rc > 0:
                    return stderr.read().strip()
                else:
                    return stdout.read().strip()
            else:
                if rc > 0:
                    print_color(30, "==> %-15s Result :" % self.host)
                    print_color(34, stdout.read())
                    print_color(31, stderr.read())
                else:
                    print_color(30, "==> %-15s Result :" % self.host)
                    print_color(34, stdout.read())

    def put(self,local_file,dest_path):
        rsync_cmd = 'rsync -av --delete --exclude=.git --exclude=.log {0} {1}:{2}'.format(local_file,self.host,dest_path)
        call(rsync_cmd, silent=True)

def check_schemas(workspace=os.getenv("WORKSPACE"),filename='.gitmodules'):
    import configparser
    config = configparser.ConfigParser()
    config.read(filename)
    modules = config.sections()
    msg = []
    for i in modules:
        if "frameworks" in i:
            module_url  = config[i]['url']
            print(module_url + "  ignore")
        else:
            module_path = config[i]['path']
            module_url  = config[i]['url']
            cmd_path = os.path.join(workspace,module_path)
            result = call('cd {} && git log --pretty=oneline HEAD..origin/master'.format(cmd_path),silent=True)
            if result.out:
                msg.append(">>> {} is not latest".format(i))
    if msg:
        die('\n'.join(msg))
